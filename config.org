* Startup
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(setq inhibit-startup-echo-area-message t)
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)

(tool-bar-mode 0)
(tooltip-mode  0)
(scroll-bar-mode 0)
#+END_SRC

* Packages
** Archives
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))

(package-initialize)
#+END_SRC

** Install
#+BEGIN_SRC emacs-lisp
(setq the-packages
      '(
        use-package
        multiple-cursors     ;; Best feature of Sublime Text
        smartparens          ;; Slurp and barf
        undo-tree            ;; Show a graph of edits that can be undone
        smex                 ;; Better help in minibuffer
        ido-ubiquitous       ;; Ido mode for everything
        company              ;; Auto completion
        avy                  ;; Jump to position in buffer
        iedit                ;; Edit all in scope
        exec-path-from-shell ;; Fix the path on MacOS
	reveal-in-osx-finder ;; Open finder at current buffer's location

	magit
	org-bullets

	haskell-mode
	go-mode
))

(mapcar (lambda (package)
          (if (package-installed-p package)
              nil
              (package-install package)))
        the-packages)
#+END_SRC

** Enable 'use-package'
#+BEGIN_SRC emacs-lisp
(require 'use-package)
#+END_SRC

* Look
** Font
#+BEGIN_SRC emacs-lisp
(set-face-font 'default "Roboto Mono Light 16")
(setq-default line-spacing 6)
#+END_SRC

** Colors
#+BEGIN_SRC emacs-lisp
(setq frame-background-mode 'light)
(set-background-color "#ffffff")
(set-foreground-color "#000000")

#+END_SRC

** Frame
#+BEGIN_SRC emacs-lisp
(set-frame-parameter (selected-frame) 'internal-border-width 24)
(fringe-mode '(0 . 0))
#+END_SRC

** Mode Line
#+BEGIN_SRC emacs-lisp
(defun mode-line-render (left right)
  "Return a string of `window-width' length containing left, and
   right aligned respectively."
  (let* ((available-width (- (window-total-width) (length left) )))
    (format (format "%%s %%%ds" available-width) left right)))

(setq-default header-line-format
  '(:eval (mode-line-render

   (format-mode-line
    (list
     (propertize "" 'face `(:weight regular))
     (propertize "%b " 'face `(:weight regular))
     '(:eval (if (and buffer-file-name (buffer-modified-p))
         (propertize "(modified)" 
		     'face `(:weight light
			     :foreground "#aaaaaa"))))))
   
   (format-mode-line
    (propertize "%3l:%2c "
	'face `(:weight light :foreground "#aaaaaa"))))))

(setq-default mode-line-format "") ;; The "normal" mode line (at the bottom)

(set-face-attribute 'header-line nil
;;                    :weight 'regular
		    :height 140
                    :underline "black"
                    :foreground "black"
		    :background "white"
                    :box `(:line-width 3 :color "white" :style nil))

(set-face-attribute 'mode-line nil
                    :height 10
                    :underline "black"
                    :background "white"
		                :foreground "white"
                    :box nil)

(set-face-attribute 'mode-line-inactive nil
                    :box nil
                    :inherit 'mode-line)

(set-face-attribute 'mode-line-buffer-id nil 
                    :weight 'light)
#+END_SRC

** Cursor
#+BEGIN_SRC emacs-lisp
(setq cursor-type 'bar)
(set-default 'cursor-type 'bar)
#+END_SRC

** Line numbers
#+BEGIN_SRC emacs-lisp
(require 'linum)
(setq linum-format (quote "%4d  "))
(global-linum-mode 0)
#+END_SRC

** Parenthesis
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

** Org bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets)
(setq org-bullets-bullet-list '("●" "○" "◉" "✸"))
(setq org-ellipsis " ... ")
#+END_SRC

** Org colors
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'org-level-1 nil
		    :foreground "black"
		    :weight 'regular)
(set-face-attribute 'org-level-2 nil
		    :foreground "black"
		    :weight 'thin)
(set-face-attribute 'org-level-3 nil
		    :foreground "black"
		    :weight 'thin)
(set-face-attribute 'org-link nil
		    :underline nil
		    :foreground "dark blue")
(set-face-attribute 'org-verbatim nil
		    :foreground "dark blue")
#+END_SRC
* Feel
** Ido
#+BEGIN_SRC emacs-lisp
(ido-mode 1)
(setq ido-everywhere t)
#+END_SRC

** Smex
Ido completition for M-x menu.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-x") (lambda ()
                              (interactive)
                              (or (boundp 'smex-cache)
                                  (smex-initialize))
                              (global-set-key [(meta x)] 'smex)
                              (smex)))
#+END_SRC

** Undo
#+BEGIN_SRC emacs-lisp
(global-undo-tree-mode 1)
#+END_SRC

** Scrolling
*** Nudging the buffer up or down
#+BEGIN_SRC emacs-lisp
(defun my-scroll-down ()
  (interactive)
  (scroll-up 1))

(defun my-scroll-up ()
  (interactive)
  (scroll-down 1))

(global-set-key [M-s-up] 'my-scroll-down)
(global-set-key [M-s-down]   'my-scroll-up)
#+END_SRC

** Navigation
*** Buffers
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-o") 'other-window)
#+END_SRC

*** Lines
#+BEGIN_SRC emacs-lisp
(defun smart-beginning-of-line ()
  "Move point to first non-whitespace character or beginning-of-line.
   Move point to the first non-whitespace character on this line.
   If point was already at that position, move point to beginning of line."
  (interactive "^") ; Use (interactive "^") in Emacs 23 to make shift-select work
  (let ((oldpos (point)))
    (back-to-indentation)
    (and (= oldpos (point))
         (beginning-of-line))))

(global-set-key [s-left] 'smart-beginning-of-line)
(global-set-key [home] 'smart-beginning-of-line)
(global-set-key (kbd "C-a") 'smart-beginning-of-line)

(global-set-key [s-right] 'end-of-line)
(define-key global-map [end] 'end-of-line)
(global-set-key (kbd "C-e") 'end-of-line)

(global-set-key [s-up] 'beginning-of-buffer)
(global-set-key [s-down] 'end-of-buffer)
#+END_SRC

** Move Lines
#+BEGIN_SRC emacs-lisp
(defun move-lines (n)
  (let ((beg) (end) (keep))
    (if mark-active
        (save-excursion
          (setq keep t)
          (setq beg (region-beginning)
                end (region-end))
          (goto-char beg)
          (setq beg (line-beginning-position))
          (goto-char end)
          (setq end (line-beginning-position 2)))
      (setq beg (line-beginning-position)
            end (line-beginning-position 2)))
    (let ((offset (if (and (mark t)
                           (and (>= (mark t) beg)
                                (< (mark t) end)))
                      (- (point) (mark t))))
          (rewind (- end (point))))
      (goto-char (if (< n 0) beg end))
      (forward-line n)
      (insert (delete-and-extract-region beg end))
      (backward-char rewind)
      (if offset (set-mark (- (point) offset))))
    (if keep
        (setq mark-active t
              deactivate-mark nil))))

(defun move-lines-up (n)
  "move the line(s) spanned by the active region up by N lines."
  (interactive "*p")
  (move-lines (- (or n 1))))

(defun move-lines-down (n)
  "move the line(s) spanned by the active region down by N lines."
  (interactive "*p")
  (move-lines (or n 1)))

(global-set-key (kbd "C-s-<down>") 'move-lines-down)
(global-set-key (kbd "C-s-<up>") 'move-lines-up)
#+END_SRC

* Modes
** Org
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda ()
                           (org-bullets-mode 1)
                           (local-unset-key (kbd "<S-up>"))
                           (local-unset-key (kbd "<S-down>"))
                           (local-unset-key (kbd "<S-left>"))
                           (local-unset-key (kbd "<S-right>"))
                           ))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :init (bind-key "C-x g" 'magit-status))

(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell)
#+END_SRC
