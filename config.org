* Startup
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(setq inhibit-startup-echo-area-message t)
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)

(tool-bar-mode 0)
(tooltip-mode  0)
(scroll-bar-mode 0)
#+END_SRC

* Packages
** Archives
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))

(package-initialize)
#+END_SRC

** Install
#+BEGIN_SRC emacs-lisp
(setq the-packages
      '(
        use-package
        multiple-cursors     ;; Best feature of Sublime Text
        smartparens          ;; Slurp and barf
        undo-tree            ;; Show a graph of edits that can be undone
        smex                 ;; Better help in minibuffer
        ido-ubiquitous       ;; Ido mode for everything
        company              ;; Auto completion
        avy                  ;; Jump to position in buffer
        iedit                ;; Edit all in scope
        exec-path-from-shell ;; Fix the path on MacOS
	reveal-in-osx-finder ;; Open finder at current buffer's location
	org-bullets          ;; Make org bullet points look nice
	rainbow-mode         ;; Show color of hex values inlined in the buffer
	imenu                ;; Goto definition within the file
	
	magit                ;; The best

	haskell-mode
	go-mode
))

(mapcar (lambda (package)
          (if (package-installed-p package)
              nil
              (package-install package)))
        the-packages)
#+END_SRC

** Enable 'use-package'
#+BEGIN_SRC emacs-lisp
(require 'use-package)
#+END_SRC

* Look
** Fonts
*** Define 'set-face' function
#+BEGIN_SRC emacs-lisp
(defun set-face (face style)
  "Reset a face and make it inherit style."
  (set-face-attribute face nil
   :foreground 'unspecified :background 'unspecified
   :family     'unspecified :slant      'unspecified
   :weight     'unspecified :height     'unspecified
   :underline  'unspecified :overline   'unspecified
   :box        'unspecified :inherit    style))
#+END_SRC

*** Font presets
#+BEGIN_SRC emacs-lisp
(defface face-popout  '((t :foreground "#00bba7"))  "Popout")
(defface face-strong  '((t :weight regular))        "Strong")
(defface face-salient '((t :foreground "#000055")) "Salient")
(defface face-faded   '((t :foreground "#999999"))   "Faded")
(defface face-subtle  '((t :background "#f0f0f0"))  "Subtle")
#+END_SRC

*** Main font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 170)
(setq-default line-spacing 4)

(defface face-display
  '((t :family "Fira Code" :inherit 'face-faded))  "Display")
#+END_SRC

*** Regions, etc
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'region nil
		    :background "#f0f0f0")
(set-face-attribute 'highlight nil
		    :foreground "black"
		    :background "#f0f0f0")
(set-face-attribute 'bold nil
 		    :foreground "black"
		    :weight 'regular)
#+END_SRC

*** Programming
#+BEGIN_SRC emacs-lisp
(set-face 'font-lock-comment-face                         'face-faded)
(set-face 'font-lock-doc-face                             'face-faded)
(set-face 'font-lock-string-face                         'face-popout)
(set-face 'font-lock-constant-face                      'face-salient)
(set-face 'font-lock-warning-face                        'face-popout)
(set-face 'font-lock-function-name-face                  'face-strong)
(set-face 'font-lock-variable-name-face                  'face-strong)
(set-face 'font-lock-builtin-face                       'face-salient)
(set-face 'font-lock-type-face                          'face-salient)
(set-face 'font-lock-keyword-face                       'face-salient)
#+END_SRC

*** Non-programming
#+BEGIN_SRC emacs-lisp
(set-face 'header-line-highlight                          'face-faded)
(set-face 'region                                        'face-subtle)
(set-face 'highlight                                     'face-subtle)
(set-face 'org-link                                     'face-salient)
(set-face 'org-verbatim                                 'face-salient)
(set-face 'bold                                          'face-strong)
(set-face 'italic                                         'face-faded)
(set-face 'cursor                                        'face-strong)
(set-face-attribute 'cursor nil
                           :background (face-foreground 'face-strong))
(set-face 'minibuffer-prompt                             'face-strong)
(set-face 'link                                         'face-salient)
(set-face 'fringe                                         'face-faded)
(set-face 'isearch                                       'face-strong)
(set-face 'lazy-highlight                                'face-subtle)
(set-face 'show-paren-match                              'face-popout)
(set-face 'show-paren-mismatch                           'face-normal)
(set-face 'shadow                                         'face-faded)
(set-face 'warning                                       'face-popout)
(set-face 'outline-1                                     'face-strong)
(set-face 'outline-2                                     'face-strong)
(set-face 'outline-3                                     'face-strong)
(set-face 'outline-4                                     'face-strong)
(set-face 'outline-5                                     'face-strong)
(set-face 'outline-6                                     'face-strong)
#+END_SRC

*** Documentation
#+BEGIN_SRC emacs-lisp
(set-face 'info-menu-header                              'face-strong)
(set-face 'info-header-node                              'face-normal)
(set-face 'Info-quoted                                    'face-faded)
(set-face 'info-title-1                                  'face-strong)
(set-face 'info-title-2                                  'face-strong)
(set-face 'info-title-3                                  'face-strong)
(set-face 'info-title-4                                  'face-strong)
#+END_SRC

** Ligatures
(defun enable-ligatures ()
  (interactive)
  (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
                 (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
                 (36 . ".\\(?:>\\)")
                 (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
                 (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
                 ;;(42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)") ;; This messes up triple stars in Org mode (***)
                 (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
                 (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
                 (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
                 (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
                 (48 . ".\\(?:x[a-zA-Z]\\)")
                 (58 . ".\\(?:::\\|[:=]\\)")
                 (59 . ".\\(?:;;\\|;\\)")
                 (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
                 (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
                 (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
                 (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
                 (91 . ".\\(?:]\\)")
                 (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
                 (94 . ".\\(?:=\\)")
                 (119 . ".\\(?:ww\\)")
                 (123 . ".\\(?:-\\)")
                 (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
                 (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)"))))
    (dolist (char-regexp alist)
      (set-char-table-range composition-function-table (car char-regexp)
                            `([,(cdr char-regexp) 0 font-shape-gstring])))))

(defun disable-ligatures ()
  (interactive)
  (let ((alist '((33 . "")
                 (35 . "")
                 (36 . "")
                 (37 . "")
                 (38 . "")
                 (43 . "")
                 (45 . "")
                 (46 . "")
                 (47 . "")
                 (48 . "")
                 (58 . "")
                 (59 . "")
                 (60 . "")
                 (61 . "")
                 (62 . "")
                 (63 . "")
                 (91 . "")
                 (92 . "")
                 (94 . "")
                 (119 . "")
                 (123 . "")
                 (124 . "")
                 (126 . ""))))
    (dolist (char-regexp alist)
      (set-char-table-range composition-function-table (car char-regexp)
                            `([,(cdr char-regexp) 0 font-shape-gstring])))))

** Frame
#+BEGIN_SRC emacs-lisp
(set-frame-parameter (selected-frame) 'internal-border-width 24)
(fringe-mode '(0 . 0))
(setq frame-background-mode 'light)
(set-background-color "#ffffff")
(set-foreground-color "#000000")
#+END_SRC

** Mode Line
#+BEGIN_SRC emacs-lisp
(defun mode-line-render (left right)
  "Return a string of `window-width' length containing left, and
   right aligned respectively."
  (let* ((available-width (- (window-total-width) (length left) )))
    (format (format "%%s %%%ds" available-width) left right)))

(setq-default header-line-format
  '(:eval (mode-line-render

   (format-mode-line
    (list
     (propertize "" 'face `(:weight regular))
     (propertize "%b " 'face `(:weight regular))
     '(:eval (if (and buffer-file-name (buffer-modified-p))
         (propertize "(modified)" 
		     'face `(:weight light
			     :foreground "#aaaaaa"))))))
   
   (format-mode-line
    (propertize "%3l:%2c "
	'face `(:weight light :foreground "#aaaaaa"))))))

(setq-default mode-line-format "") ;; The "normal" mode line (at the bottom)

(set-face-attribute 'header-line nil
;;                    :weight 'regular
		    :height 140
                    :underline "black"
                    :foreground "black"
		    :background "white"
                    :box `(:line-width 3 :color "white" :style nil))

(set-face-attribute 'mode-line nil
                    :height 10
                    :underline "black"
                    :background "white"
		                :foreground "white"
                    :box nil)

(set-face-attribute 'mode-line-inactive nil
                    :box nil
                    :inherit 'mode-line)

(set-face-attribute 'mode-line-buffer-id nil 
                    :weight 'light)(set-face-attribute 'header-line nil
		    :height 140
                    :underline t
                    :underline "black"
                    :foreground "black"
		    :background "white"
                    :box `(:line-width 3 :color "white" :style nil))
(set-face-attribute 'mode-line nil
                    :height 10
                    :underline "black"
                    :background "white"
		    :foreground "white"
                    :box nil)
(set-face 'mode-line-inactive  'mode-line)
(set-face 'mode-line-buffer-id  'default)

(defun mode-line-render (left right)
  "Return a string of `window-width' length containing left, and
   right aligned respectively."
  (let* ((available-width (- (window-total-width) (length left) )))
    (format (format "%%s %%%ds" available-width) left right)))
(define-key mode-line-major-mode-keymap [header-line]
  (lookup-key mode-line-major-mode-keymap [mode-line]))

(setq-default mode-line-format '(""))
(setq-default header-line-format
  '(:eval (mode-line-render
   (format-mode-line
    (list
     (propertize "☰"
                 'face `(:weight regular)
                 'mouse-face 'header-line-highlight
                 'help-echo  "Major mode menu"
                 'local-map   mode-line-major-mode-keymap)
     " %b "
     '(:eval (if (and buffer-file-name (buffer-modified-p))
                 (propertize "(modified)"
              'face `(:foreground ,(face-foreground 'face-faded)))))))
   (format-mode-line
    (propertize "%3l:%2c  "
	'face `(:foreground ,(face-foreground 'face-faded)))))))
#+END_SRC

** Cursor
#+BEGIN_SRC emacs-lisp
(setq cursor-type 'bar)
(set-default 'cursor-type 'bar)
#+END_SRC

** Line numbers
#+BEGIN_SRC emacs-lisp
(require 'linum)
(setq linum-format (quote "%4d  "))
(global-linum-mode 0)
#+END_SRC

** Parenthesis
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

** Org
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t) ;; Makes bold/underlined text work properly.
(setq org-src-fontify-natively t)
#+END_SRC

** Org Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets)
(setq org-bullets-bullet-list '("✸"))
;; (setq org-ellipsis " ... ")
#+END_SRC

* Feel
** Idiosyncrasies
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

** The missing keyboard shortcuts
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "s-b") 'ibuffer)
(global-set-key (kbd "C-x C-f") 'ido-find-file)
(global-set-key (kbd "s-W") 'delete-window)
(global-set-key (kbd "C-x k") 'kill-this-buffer)
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "s-i") 'imenu) ; lists the functions in file
(global-set-key (kbd "s-f") 'rgrep) ; search for files
(global-set-key (kbd "s-+") 'enlarge-window)
(global-set-key (kbd "s--") 'shrink-window)
(global-set-key (kbd "M-+") 'enlarge-window-horizontally)
(global-set-key (kbd "M--") 'shrink-window-horizontally)
(global-set-key (kbd "C-<") 'shell)
(global-set-key (kbd "M-n") 'next-error) ; also works for rgrep results
(global-set-key (kbd "M-p") 'previous-error)
(global-set-key (kbd "s-g") 'goto-line)
#+END_SRC

** Kill whitespace (to the left and right of the cursor)
#+BEGIN_SRC emacs-lisp
(defun kill-whitespace ()
  "Kill the whitespace between two non-whitespace characters"
  (interactive "*")
  (save-excursion
    (save-restriction
      (save-match-data
        (progn
          (re-search-backward "[^ \t\r\n]" nil t)
          (re-search-forward "[ \t\r\n]+" nil t)
          (replace-match "" nil nil))))))

(global-set-key [s-backspace] 'kill-whitespace)
#+END_SRC

** Characters
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-2") "@")
(global-set-key (kbd "M-4") "$")
(global-set-key (kbd "M-8") "[")
(global-set-key (kbd "M-9") "]")
(global-set-key (kbd "M-(") "{")
(global-set-key (kbd "M-)") "}")
(global-set-key (kbd "M-7") "|")
(global-set-key (kbd "M-/") "\\")
#+END_SRC

** Ido
#+BEGIN_SRC emacs-lisp
(ido-mode 1)
(setq ido-everywhere t)
#+END_SRC

** Smex
Ido completition for M-x menu.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-x") (lambda ()
                              (interactive)
                              (or (boundp 'smex-cache)
                                  (smex-initialize))
                              (global-set-key [(meta x)] 'smex)
                              (smex)))
#+END_SRC

** Undo
#+BEGIN_SRC emacs-lisp
(global-undo-tree-mode 1)
#+END_SRC

** Commenting
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-/") 'comment-or-uncomment-region)
#+END_SRC

** Scrolling
*** Nudging the buffer up or down
#+BEGIN_SRC emacs-lisp
(defun my-scroll-down ()
  (interactive)
  (scroll-up 1))

(defun my-scroll-up ()
  (interactive)
  (scroll-down 1))

(global-set-key [M-s-up] 'my-scroll-down)
(global-set-key [M-s-down]   'my-scroll-up)
#+END_SRC

** Navigation
*** Buffers
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-o") 'other-window)
#+END_SRC

*** Lines
#+BEGIN_SRC emacs-lisp
(defun smart-beginning-of-line ()
  "Move point to first non-whitespace character or beginning-of-line.
   Move point to the first non-whitespace character on this line.
   If point was already at that position, move point to beginning of line."
  (interactive "^") ; Use (interactive "^") in Emacs 23 to make shift-select work
  (let ((oldpos (point)))
    (back-to-indentation)
    (and (= oldpos (point))
         (beginning-of-line))))

(global-set-key [s-left] 'smart-beginning-of-line)
(global-set-key [home] 'smart-beginning-of-line)
(global-set-key (kbd "C-a") 'smart-beginning-of-line)

(global-set-key [s-right] 'end-of-line)
(define-key global-map [end] 'end-of-line)
(global-set-key (kbd "C-e") 'end-of-line)

(global-set-key [s-up] 'beginning-of-buffer)
(global-set-key [s-down] 'end-of-buffer)
#+END_SRC

** Move Lines
#+BEGIN_SRC emacs-lisp
(defun move-lines (n)
  (let ((beg) (end) (keep))
    (if mark-active
        (save-excursion
          (setq keep t)
          (setq beg (region-beginning)
                end (region-end))
          (goto-char beg)
          (setq beg (line-beginning-position))
          (goto-char end)
          (setq end (line-beginning-position 2)))
      (setq beg (line-beginning-position)
            end (line-beginning-position 2)))
    (let ((offset (if (and (mark t)
                           (and (>= (mark t) beg)
                                (< (mark t) end)))
                      (- (point) (mark t))))
          (rewind (- end (point))))
      (goto-char (if (< n 0) beg end))
      (forward-line n)
      (insert (delete-and-extract-region beg end))
      (backward-char rewind)
      (if offset (set-mark (- (point) offset))))
    (if keep
        (setq mark-active t
              deactivate-mark nil))))

(defun move-lines-up (n)
  "move the line(s) spanned by the active region up by N lines."
  (interactive "*p")
  (move-lines (- (or n 1))))

(defun move-lines-down (n)
  "move the line(s) spanned by the active region down by N lines."
  (interactive "*p")
  (move-lines (or n 1)))

(global-set-key (kbd "C-s-<down>") 'move-lines-down)
(global-set-key (kbd "C-s-<up>") 'move-lines-up)
#+END_SRC

* Modes
** Org
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda ()
                           (org-bullets-mode 1)
                           (local-unset-key (kbd "<S-up>"))
                           (local-unset-key (kbd "<S-down>"))
                           (local-unset-key (kbd "<S-left>"))
                           (local-unset-key (kbd "<S-right>"))
                           ))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :init (bind-key "C-x g" 'magit-status))

(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell)
#+END_SRC
