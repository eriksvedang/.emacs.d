* Startup
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(setq inhibit-startup-screen t)
(setq inhibit-startup-echo-area-message t)
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)

(menu-bar-mode 0)
(tool-bar-mode 0)
(tooltip-mode  0)
(scroll-bar-mode 0)
#+END_SRC

* Packages
** Archives
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

** Install
#+BEGIN_SRC emacs-lisp
(setq the-packages
      '(
      use-package
      multiple-cursors     ;; Best feature of Sublime Text
      smartparens          ;; Slurp and barf
      undo-tree            ;; Show a graph of edits that can be undone
      smex                 ;; Better help in minibuffer
      ido-completing-read+ ;; Replacing ido-ubiquitous
      company              ;; Auto completion
      company-fuzzy

      ivy
      counsel

      avy                  ;; Jump to position in buffer
      iedit                ;; Edit all in scope
      exec-path-from-shell ;; Fix the path on MacOS
      reveal-in-osx-finder ;; Open finder at current buffer's location
      org-bullets          ;; Make org bullet points look nice
      rainbow-mode         ;; Show color of hex values inlined in the buffer
      imenu                ;; Goto definition within the file
      flycheck             ;; Red squiggly lines in your code
      find-file-in-project ;; Make any git folder a project
      free-keys            ;; Show what key combinations that are not taken
      expand-region        ;; Select larger and larger region
      ace-window           ;; Select window with number keys
      swiper               ;; Better search in buffer

      flymake-easy         ;; Helpers for easily building Emacs flymake checkers.
      flymake-cursor
      flymake-hlint

      magit                ;; The best git client ever!

      haskell-mode
      dante                ;; Interactive Haskell mode
      ormolu               ;; Haskell auto-formatting
      go-mode
      go-imenu
      go-dlv               ;; Debugger
      go-impl              ;; Stub generator
      clojure-mode
      omnisharp            ;; IDE-like features for C#
      lsp-mode             ;; Language Server Protocol

      php-mode
      lua-mode
      swift-mode
      markdown-mode
      cc-mode
      glsl-mode
      irony
      gud                  ;; GDB debugging
      cc-mode              ;; C
      cmake-mode
      yaml-mode
      elm-mode
      idris-mode
      purescript-mode
      tuareg               ;; OCaml
      rust-mode
      racer                ;; Rust auto complete
      flycheck-rust

      racket-mode
      fsharp-mode

      nix-mode
      nix-buffer

      sgml-mode            ;; HTML mode
      zencoding-mode
      js2-mode
      rjsx-mode            ;; JSX (used in React)
      web-mode             ;; Smart editing of HTML templates
      restclient           ;; Send web requests from a buffer
))

(mapcar (lambda (package)
          (if (package-installed-p package)
              nil
              (package-install package)))
        the-packages)
#+END_SRC

** Enable 'use-package'
#+BEGIN_SRC emacs-lisp
(require 'use-package)
#+END_SRC

** Make PATH work on MacOS
#+BEGIN_SRC emacs-lisp
(require 'exec-path-from-shell)
(when (eq system-type 'darwin)
  (exec-path-from-shell-initialize))
#+END_SRC

* Look
** Fonts
*** Define 'set-face' function
#+BEGIN_SRC emacs-lisp
(defun set-face (face style)
  "Reset a face and make it inherit style."
  (set-face-attribute face nil
   :foreground 'unspecified :background 'unspecified
   :family     'unspecified :slant      'unspecified
   :weight     'unspecified :height     'unspecified
   :underline  'unspecified :overline   'unspecified
   :box        'unspecified :inherit    style))
#+END_SRC

*** Font presets
#+BEGIN_SRC emacs-lisp
(defface face-critical '((t :foreground "#ffffff"
                           :background "#ff6347")) "Critical")
(defface face-popout  '((t :foreground "#00bba7"))  "Popout")
(defface face-strong  '((t :weight regular))        "Strong")
(defface face-salient '((t :foreground "#221199")) "Salient") ;; Used to be 000055
(defface face-faded   '((t :foreground "#999999"))   "Faded")
(defface face-subtle  '((t :background "#f0f0f0"))  "Subtle")
#+END_SRC

*** Main font
#+BEGIN_SRC emacs-lisp
(set-face-font 'default "Fira Code 16")
(setq-default line-spacing 5)
#+END_SRC

*** Programming
#+BEGIN_SRC emacs-lisp
(set-face 'font-lock-comment-face                         'face-faded)
(set-face 'font-lock-doc-face                             'face-faded)
(set-face 'font-lock-string-face                         'face-popout)
(set-face 'font-lock-constant-face                      'face-salient)
(set-face 'font-lock-warning-face                        'face-popout)
(set-face 'font-lock-function-name-face                  'face-strong)
(set-face 'font-lock-variable-name-face                  'face-strong)
(set-face 'font-lock-builtin-face                       'face-salient)
(set-face 'font-lock-type-face                          'face-salient)
(set-face 'font-lock-keyword-face                       'face-salient)
#+END_SRC

*** Non-programming
#+BEGIN_SRC emacs-lisp
(set-face 'header-line-highlight                          'face-faded)
(set-face 'region                                        'face-subtle)
(set-face 'highlight                                     'face-subtle)
(set-face 'org-link                                      'face-popout)
(set-face 'org-verbatim                                 'face-salient)
(set-face 'bold                                          'face-strong)
(set-face 'italic                                         'face-faded)
(set-face 'cursor                                        'face-strong)
(set-face-attribute 'cursor nil
                           :background (face-foreground 'face-strong))
(set-face 'minibuffer-prompt                             'face-strong)
(set-face 'link                                         'face-salient)
(set-face 'fringe                                         'face-faded)
(set-face 'isearch                                       'face-strong)
(set-face 'lazy-highlight                                'face-subtle)
(set-face 'show-paren-match                              'face-popout)
(set-face 'show-paren-mismatch                           'face-normal)
(set-face 'shadow                                         'face-faded) ;; Used for line numbers
(set-face 'warning                                       'face-popout)
(set-face 'error                                       'face-critical)
(set-face 'outline-1                                     'face-strong)
(set-face 'outline-2                                     'face-strong)
(set-face 'outline-3                                     'face-strong)
(set-face 'outline-4                                     'face-strong)
(set-face 'outline-5                                     'face-strong)
(set-face 'outline-6                                     'face-strong)
#+END_SRC

*** Documentation
#+BEGIN_SRC emacs-lisp
(set-face 'info-menu-header                              'face-strong)
(set-face 'info-header-node                              'face-normal)
(set-face 'Info-quoted                                    'face-faded)
(set-face 'info-title-1                                  'face-strong)
(set-face 'info-title-2                                  'face-strong)
(set-face 'info-title-3                                  'face-strong)
(set-face 'info-title-4                                  'face-strong)
#+END_SRC

** Ligatures
#+BEGIN_SRC emacs-lisp
(defun enable-ligatures ()
  (interactive)
  (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
                 (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
                 (36 . ".\\(?:>\\)")
                 (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
                 (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
                 ;;(42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)") ;; This messes up triple stars in Org mode (***)
                 (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
                 (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
                 (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
                 (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
                 (48 . ".\\(?:x[a-zA-Z]\\)")
                 (58 . ".\\(?:::\\|[:=]\\)")
                 (59 . ".\\(?:;;\\|;\\)")
                 (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
                 (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
                 (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
                 (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
                 (91 . ".\\(?:]\\)")
                 (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
                 (94 . ".\\(?:=\\)")
                 (119 . ".\\(?:ww\\)")
                 (123 . ".\\(?:-\\)")
                 (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
                 (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)"))))
    (dolist (char-regexp alist)
      (set-char-table-range composition-function-table (car char-regexp)
                            `([,(cdr char-regexp) 0 font-shape-gstring])))))

(defun disable-ligatures ()
  (interactive)
  (let ((alist '((33 . "")
                 (35 . "")
                 (36 . "")
                 (37 . "")
                 (38 . "")
                 (43 . "")
                 (45 . "")
                 (46 . "")
                 (47 . "")
                 (48 . "")
                 (58 . "")
                 (59 . "")
                 (60 . "")
                 (61 . "")
                 (62 . "")
                 (63 . "")
                 (91 . "")
                 (92 . "")
                 (94 . "")
                 (119 . "")
                 (123 . "")
                 (124 . "")
                 (126 . ""))))
    (dolist (char-regexp alist)
      (set-char-table-range composition-function-table (car char-regexp)
                            `([,(cdr char-regexp) 0 font-shape-gstring])))))

(enable-ligatures)
#+END_SRC

** Frame
#+BEGIN_SRC emacs-lisp
(set-frame-parameter (selected-frame) 'internal-border-width 24)
(fringe-mode '(0 . 0))
;;(add-to-list 'default-frame-alist '(fullscreen . maximized))
(setq frame-background-mode 'light)
(set-background-color "#ffffff")
(set-foreground-color "#000000")
#+END_SRC

** Mode Line
#+BEGIN_SRC emacs-lisp
(defun mode-line-render (left right)
  "Return a string of `window-width' length containing left, and
   right aligned respectively."
  (let* ((available-width (- (window-total-width) (length left) )))
    (format (format "%%s %%%ds" available-width) left right)))

(setq-default header-line-format
  '(:eval (mode-line-render

   (format-mode-line
    (list
     (propertize "" 'face `(:weight regular))
     (propertize "%b " 'face `(:weight regular))
     '(:eval (if (and buffer-file-name (buffer-modified-p))
         (propertize "(modified)"
             'face `(:weight light
                 :foreground "#aaaaaa"))))))

   (format-mode-line
    (propertize "%3l:%2c "
    'face `(:weight light :foreground "#aaaaaa"))))))

(setq-default mode-line-format "") ;; The "normal" mode line (at the bottom)

(set-face-attribute 'mode-line nil
                    :height 10
                    :underline "black"
                    :background "white"
                    :foreground "white"
                    :box nil)

(set-face-attribute 'mode-line-inactive nil
                    :box nil
                    :inherit 'mode-line)

(set-face-attribute 'mode-line-buffer-id nil
                    :weight 'light)

(set-face-attribute 'header-line nil
                    :height 180
                    :underline t
                    :underline "black"
                    :foreground "black"
                    :background "white"
                    :box `(:line-width 12 :color "white" :style nil))

(set-face-attribute 'mode-line nil
                    :height 10
                    :underline "black"
                    :background "white"
                    :foreground "white"
                    :box nil)

(set-face 'mode-line-inactive  'mode-line)
(set-face 'mode-line-buffer-id  'default)

(defun mode-line-render (left right)
  "Return a string of `window-width' length containing left, and
   right aligned respectively."
  (let* ((available-width (- (window-total-width) (length left) )))
    (format (format "%%s %%%ds" available-width) left right)))
(define-key mode-line-major-mode-keymap [header-line]
  (lookup-key mode-line-major-mode-keymap [mode-line]))

(setq-default mode-line-format '(""))

(defun vc-branch ()
  (if vc-mode
      (let ((backend (vc-backend buffer-file-name)))
        (concat "#" (substring-no-properties vc-mode
                                 (+ (if (eq backend 'Hg) 2 3) 2))))
      ""))

(setq-default header-line-format
  '(:eval (mode-line-render
   (format-mode-line
    (list
     (propertize "☰"
                 'face `(:weight regular)
                 'mouse-face 'header-line-highlight
                 'help-echo  "Major mode menu"
                 'local-map   mode-line-major-mode-keymap)
     " %b "
     '(:eval (propertize (vc-branch) 'face `(:foreground ,(face-foreground 'face-popout))))
     " "
     '(:eval (if (and buffer-file-name (buffer-modified-p))
                 (propertize "(modified)"
              'face `(:foreground ,(face-foreground 'face-faded)))))
     ))
   (format-mode-line
    (propertize "%3l:%2c              "
    'face `(:foreground ,(face-foreground 'face-faded)))))))
#+END_SRC

** Cursor
#+BEGIN_SRC emacs-lisp
(setq cursor-type 'bar)
(set-default 'cursor-type 'bar)
#+END_SRC

** Line numbers
#+BEGIN_SRC emacs-lisp
(require 'linum)
(setq linum-format (quote "%4d  "))
(global-linum-mode 1)
#+END_SRC

** Parenthesis
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

** Tabs
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
#+END_SRC

** Org
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t) ;; Makes bold/underlined text work properly.
(setq org-src-fontify-natively t)


(setq org-capture-templates
      '(
        ("l" "Link" entry (file+headline "~/Documents/Organized/links.org" "Unsorted") "* %?\n")
        ("i" "Idea" entry (file "~/Documents/Organized/ideas.org") "* %?\n")
        ("t" "Todo" entry (file "~/Documents/Organized/todo.org") "* TODO %?\n")
        ))
#+END_SRC

** Org Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets)
(setq org-bullets-bullet-list '("✸" "◇" "•" "○" "✤" "✩"))
#+END_SRC
*** Third level
**** Fourth level
***** Fifth level
****** Sixth level
** What face?
#+BEGIN_SRC emacs-lisp
;; Function for finding out info about font at cursor
(defun what-face (pos)
  (interactive "d")
  (let ((face (or (get-char-property (point) 'read-face-name)
                  (get-char-property (point) 'face))))
    (if face (message "Face: %s" face) (message "No face at %d" pos))))
#+END_SRC

* Feel
** Fix idiosyncrasies
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)

(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

(global-auto-revert-mode 1)
(auto-save-mode 0)

(setq ring-bell-function 'ignore)
(setq initial-scratch-message "")
(setq undo-limit 9999999)
(setq make-backup-files nil)
(setq-default indent-tabs-mode nil)

(defalias 'yes-or-no-p 'y-or-n-p)

(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
#+END_SRC

** Advice when splitting windows
#+BEGIN_SRC emacs-lisp
(defadvice split-window (after move-point-to-new-window activate)
  "Moves the point to the newly created window after splitting."
  (other-window 1))

;; Switch to new window when using help
(defadvice describe-key (after move-point-to-new-window activate)
  (other-window 1))

(defadvice describe-function (after move-point-to-new-window activate)
  (other-window 1))

(defadvice describe-variable (after move-point-to-new-window activate)
  (other-window 1))

(defadvice apropos-command (after move-point-to-new-window activate)
  (other-window 1))

(defadvice describe-bindings (after move-point-to-new-window activate)
  (other-window 1))

(defadvice describe-mode (after move-point-to-new-window activate)
  (other-window 1))

(defadvice find-commands-by-name (after move-point-to-new-window activate)
  (other-window 1))

(defadvice completion-list-mode (after move-point-to-new-window activate)
  (other-window 1))
#+END_SRC

** The missing keyboard shortcuts
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "s-b") 'ivy-switch-buffer)
(global-set-key (kbd "C-x b") 'ivy-switch-buffer)
(global-set-key (kbd "C-x C-f") 'ido-find-file)
(global-set-key (kbd "s-w") 'kill-this-buffer)
(global-set-key (kbd "C-x k") 'kill-this-buffer)
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "s-i") 'imenu)
(global-set-key (kbd "s-f") 'rgrep)
(global-set-key (kbd "s-+") 'enlarge-window)
(global-set-key (kbd "s--") 'shrink-window)
(global-set-key (kbd "M-+") 'enlarge-window-horizontally)
(global-set-key (kbd "M--") 'shrink-window-horizontally)
(global-set-key (kbd "C-<") 'shell)
(global-set-key (kbd "M-n") 'next-error)
(global-set-key (kbd "M-p") 'previous-error)
(global-set-key (kbd "s-g") 'goto-line)
#+END_SRC

** Dired
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook
  (lambda ()
    (local-set-key (kbd "b") 'dired-up-directory)
    (auto-revert-mode t)
    (set-face 'dired-directory 'face-popout)))
#+END_SRC

** Kill whitespace
(to the left and right of the cursor)
#+BEGIN_SRC emacs-lisp
(defun kill-whitespace ()
  "Kill the whitespace between two non-whitespace characters"
  (interactive "*")
  (save-excursion
    (save-restriction
      (save-match-data
        (progn
          (re-search-backward "[^ \t\r\n]" nil t)
          (re-search-forward "[ \t\r\n]+" nil t)
          (replace-match "" nil nil))))))

(global-set-key [s-backspace] 'kill-whitespace)
#+END_SRC

** Remove whitespace on save
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)

(defun save-buffer-no-whitespace-cleanup ()
  (interactive)
  (let ((normally-should-whitespace-cleanup (memq 'whitespace-cleanup before-save-hook)))
    (when normally-should-whitespace-cleanup
      (remove-hook 'before-save-hook 'whitespace-cleanup))
    (save-buffer)
    (when normally-should-whitespace-cleanup
      (add-hook 'before-save-hook 'whitespace-cleanup))))
#+END_SRC

** Insert line above
#+BEGIN_SRC emacs-lisp
(defun smart-open-line-above ()
  "Insert an empty line above the current line."
  (interactive)
  (move-beginning-of-line nil)
  (newline-and-indent)
  (forward-line -1)
  (indent-according-to-mode))

(global-set-key (kbd "<C-return>") 'smart-open-line-above)
#+END_SRC

** Expand region
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-e") 'er/expand-region)
#+END_SRC

** Characters
These characters can't be written using the normal MacOS shortcuts (on my keyboard) without this fix.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-2") "@")
(global-set-key (kbd "M-4") "$")
(global-set-key (kbd "M-8") "[")
(global-set-key (kbd "M-9") "]")
(global-set-key (kbd "M-(") "{")
(global-set-key (kbd "M-)") "}")
(global-set-key (kbd "M-7") "|")
(global-set-key (kbd "M-/") "\\")

;; More special characters
(global-set-key (kbd "C-x M-a") "∧") ; and
(global-set-key (kbd "C-x M-b") "⊥") ; bottom
(global-set-key (kbd "C-x M-c") "∘") ; composition
(global-set-key (kbd "C-x M-d") "⊄") ; not subset
(global-set-key (kbd "C-x M-e") "∈") ; element
(global-set-key (kbd "C-x M-f") "∀") ; for all
(global-set-key (kbd "C-x M-g") "∄") ; there doesn't exist
;; h
(global-set-key (kbd "C-x M-i") "∞") ; infinity
(global-set-key (kbd "C-x M-j") "→") ; implication
(global-set-key (kbd "C-x M-k") "⇒") ; double arrow
(global-set-key (kbd "C-x M-l") "λ") ; lambda
;; m
(global-set-key (kbd "C-x M-n") "¬") ; negation
(global-set-key (kbd "C-x M-o") "∨") ; or
(global-set-key (kbd "C-x M-p") "π") ; pi
(global-set-key (kbd "C-x M-P") "Π") ; capital pi
(global-set-key (kbd "C-x M-q") "∅") ; empty set
(global-set-key (kbd "C-x M-r") "⊢") ; provable
(global-set-key (kbd "C-x M-s") "⊂") ; subset
(global-set-key (kbd "C-x M-S") "Σ") ; sigma
(global-set-key (kbd "C-x M-t") "⊤") ; true
(global-set-key (kbd "C-x M-u") "∪") ; union
(global-set-key (kbd "C-x M-v") "∩") ; intersection
(global-set-key (kbd "C-x M-w") "∉") ; not element
(global-set-key (kbd "C-x M-x") "∃") ; there exists
;; y
(global-set-key (kbd "C-x M-z") "⊃") ; implies
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
(require 'smartparens)

(define-key sp-keymap (kbd "C-)") 'sp-forward-slurp-sexp)
(define-key sp-keymap (kbd "C-(") 'sp-backward-slurp-sexp)
(define-key sp-keymap (kbd "C-M-)") 'sp-forward-barf-sexp)
(define-key sp-keymap (kbd "C-M-(") 'sp-backward-barf-sexp)

(define-key sp-keymap (kbd "C-M-k") 'sp-kill-sexp)
(define-key sp-keymap (kbd "C-M-w") 'sp-copy-sexp)
(define-key sp-keymap (kbd "C-M-<backspace>") 'sp-unwrap-sexp)

(define-key sp-keymap (kbd "C-M-t") 'sp-transpose-sexp)
(define-key sp-keymap (kbd "C-M-j") 'sp-join-sexp)
(define-key sp-keymap (kbd "C-M-s") 'sp-split-sexp)

;; Move out and to the right: ( | ) => ( ) |
(define-key sp-keymap (kbd "C-M-i") 'sp-up-sexp)

;; Move out and to the left: ( | ) => | ( )
(define-key sp-keymap (kbd "C-M-u") 'sp-backward-up-sexp)

;; Move down right: | ( ) => ( | )
(define-key sp-keymap (kbd "C-M-d") 'sp-down-sexp)

;; Move down left: ( ) | => ( | )
(define-key sp-keymap (kbd "C-M-c") 'sp-backward-down-sexp)

;; Move right: ( a | b c ) => ( a b | c )
(define-key sp-keymap (kbd "C-M-f") 'sp-forward-sexp)

;; Move left: ( a b | c ) => ( a | b c )
(define-key sp-keymap (kbd "C-M-b") 'sp-backward-sexp)

;; Move left to outmost paren ( ( | ) ) => | ( ( ) )
(define-key sp-keymap (kbd "C-M-a") 'beginning-of-defun)

(defun my-end-of-defun ()
  (interactive)
  (end-of-defun)
  (left-char))

;; Move right to outmost paren ( ( | ) ) => ( ( ) ) |
(define-key sp-keymap (kbd "C-M-e") 'my-end-of-defun)

;; Disable automatic pairing for these characters:
(sp-pair "'" nil :actions :rem)
(sp-pair "\"" nil :actions :rem)
(sp-pair "\\\"" nil :actions :rem)
#+END_SRC

** Ido
#+BEGIN_SRC emacs-lisp
(ido-mode 1)
(ido-ubiquitous-mode)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
#+END_SRC

** Smex
Ido completition for M-x menu.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-x") (lambda ()
                              (interactive)
                              (or (boundp 'smex-cache)
                                  (smex-initialize))
                              (global-set-key [(meta x)] 'smex)
                              (smex)))
#+END_SRC

** Ibuffer
#+BEGIN_SRC emacs-lisp
(setq ibuffer-formats
      '((mark modified read-only " "
              (name 30 30 :left :elide) ; change: 30s were originally 18s
              " "
              (size 9 -1 :right)
              " "
              (mode 16 16 :left :elide)
              " " filename-and-process)
        (mark " "
              (name 16 -1)
              " " filename)))

(setq ibuffer-saved-filter-groups
      '(("home"
     ("Magit" (or (name . "magit:") (name . "magit-diff:") (name . "magit-process:")))
     ("Dired" (mode . dired-mode))
     ("Emacs" (or (mode . help-mode)
              (name . "\*"))))))

(add-hook 'ibuffer-mode-hook
      '(lambda ()
         (ibuffer-switch-to-saved-filter-groups "home")))

(setq ibuffer-show-empty-filter-groups nil)

;; Refresh automatically
(add-hook 'ibuffer-mode-hook (lambda () (ibuffer-auto-mode 1)))
#+END_SRC

** Find file in project
#+BEGIN_SRC emacs-lisp
(require 'find-file-in-project)
(global-set-key (kbd "s-p") 'find-file-in-project)
(setq ffip-patterns
      '("*.html" "*.org" "*.txt" "*.md" "*.el" "*.idr"
    "*.clj" "*.cljs" "*.py" "*.rb" "*.js" "*.pl" "*.go"
    "*.sh" "*.erl" "*.hs" "*.ml" "*.css" "*.elm" "*.carp"
    "*.h" "*.c" "*.cpp" "*.cs" "*.m" "*.rs" "*.glsl"))
(setq ffip-prune-patterns
  (cons "*/Packages/*"
  (cons "*/Temp/*"
  (cons "*/Library/*"
  (cons "*/PackageCache/*"
  (cons "*/CMakeFiles/*" ffip-prune-patterns))))))
#+END_SRC

** Undo
#+BEGIN_SRC emacs-lisp
(global-undo-tree-mode 1)
#+END_SRC

** Company mode (auto completion)
#+BEGIN_SRC emacs-lisp
  (require 'company)
  (add-hook 'after-init-hook 'global-company-mode)

  (setq company-tooltip-align-annotations t)
  (setq company-minimum-prefix-length 3)
  (setq company-idle-delay 0.1)
  (setq company-dabbrev-downcase nil) ;; Don't lowercase things!

  ;; (defun my-sort-uppercase (candidates)
  ;;   (let (case-fold-search
  ;;         (re "\\`[[:upper:]]*\\'"))
  ;;     (sort candidates
  ;;           (lambda (s1 s2)
  ;;             (and (string-match-p re s2)
  ;;                  (not (string-match-p re s1)))))))

  ;; (push 'my-sort-uppercase company-transformers)

(global-set-key (kbd "M-ESC") 'company-complete)
#+END_SRC

** IEdit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-;") 'iedit-mode)
#+END_SRC

** Commenting
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-/") 'comment-or-uncomment-region)
#+END_SRC

** Scrolling
*** Nudging the buffer up or down
#+BEGIN_SRC emacs-lisp
(defun my-scroll-down ()
  (interactive)
  (scroll-up 1))

(defun my-scroll-up ()
  (interactive)
  (scroll-down 1))

(global-set-key [M-s-up] 'my-scroll-down)
(global-set-key [M-s-down]   'my-scroll-up)
#+END_SRC

** Navigation
*** Buffers
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-o") 'other-window)
#+END_SRC

*** Lines
#+BEGIN_SRC emacs-lisp
(defun smart-beginning-of-line ()
  "Move point to first non-whitespace character or beginning-of-line.
   Move point to the first non-whitespace character on this line.
   If point was already at that position, move point to beginning of line."
  (interactive "^") ; Use (interactive "^") in Emacs 23 to make shift-select work
  (let ((oldpos (point)))
    (back-to-indentation)
    (and (= oldpos (point))
         (beginning-of-line))))

(global-set-key [s-left] 'smart-beginning-of-line)
(global-set-key [home] 'smart-beginning-of-line)
(global-set-key (kbd "C-a") 'smart-beginning-of-line)

(global-set-key [s-right] 'end-of-line)
(define-key global-map [end] 'end-of-line)
(global-set-key (kbd "C-e") 'end-of-line)

(global-set-key [s-up] 'beginning-of-buffer)
(global-set-key [s-down] 'end-of-buffer)
#+END_SRC

*** Avy
#+BEGIN_SRC emacs-lisp
(require 'avy)
(define-key global-map (kbd "s-j") 'avy-goto-word-or-subword-1)
#+END_SRC

** Move Lines
#+BEGIN_SRC emacs-lisp
(defun move-lines (n)
  (let ((beg) (end) (keep))
    (if mark-active
        (save-excursion
          (setq keep t)
          (setq beg (region-beginning)
                end (region-end))
          (goto-char beg)
          (setq beg (line-beginning-position))
          (goto-char end)
          (setq end (line-beginning-position 2)))
      (setq beg (line-beginning-position)
            end (line-beginning-position 2)))
    (let ((offset (if (and (mark t)
                           (and (>= (mark t) beg)
                                (< (mark t) end)))
                      (- (point) (mark t))))
          (rewind (- end (point))))
      (goto-char (if (< n 0) beg end))
      (forward-line n)
      (insert (delete-and-extract-region beg end))
      (backward-char rewind)
      (if offset (set-mark (- (point) offset))))
    (if keep
        (setq mark-active t
              deactivate-mark nil))))

(defun move-lines-up (n)
  "move the line(s) spanned by the active region up by N lines."
  (interactive "*p")
  (move-lines (- (or n 1))))

(defun move-lines-down (n)
  "move the line(s) spanned by the active region down by N lines."
  (interactive "*p")
  (move-lines (or n 1)))

(global-set-key (kbd "C-s-<down>") 'move-lines-down)
(global-set-key (kbd "C-s-<up>") 'move-lines-up)
#+END_SRC

** Multiple cursors
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<s-mouse-1>") 'mc/add-cursor-on-click)
(global-set-key (kbd "s-d") 'mc/mark-next-like-this)
(global-set-key (kbd "s-l") 'mc/edit-lines)
;; NOTE: If you want to insert a newline in multiple-cursors-mode, use C-j
#+end_SRC

** Smerge (conflic resolution)
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c n") 'smerge-next)
(global-set-key (kbd "C-c p") 'smerge-prev)
(global-set-key (kbd "C-c u") 'smerge-keep-upper)
(global-set-key (kbd "C-c l") 'smerge-keep-lower)
#+end_SRC

** Rename file AND buffer
#+BEGIN_SRC emacs-lisp
(defun rename-file-and-buffer ()
  "Rename the current buffer and file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (cond
         ((vc-backend filename) (vc-rename-file filename new-name))
         (t
          (rename-file filename new-name t)
          (set-visited-file-name new-name t t)))))))
#+end_SRC

* Modes
** Org
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda ()
                           (org-bullets-mode 1)
                           (local-unset-key (kbd "<S-up>"))
                           (local-unset-key (kbd "<S-down>"))
                           (local-unset-key (kbd "<S-left>"))
                           (local-unset-key (kbd "<S-right>"))
                           ))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :init (bind-key "C-x g" 'magit-status))

(add-hook 'after-save-hook 'magit-after-save-refresh-status t)

(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))
#+END_SRC

** Emacs Lisp
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'smartparens-mode)
(define-key emacs-lisp-mode-map (kbd "<s-return>") 'eval-defun)
(define-key emacs-lisp-mode-map (kbd "C-c C-l") 'eval-buffer)
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell)

(use-package dante
  :ensure t
  :after haskell-mode
  :commands 'dante-mode
  :init)

(setq dante-methods '(stack new-build bare-cabal bare-ghci))

(add-hook 'dante-mode-hook (lambda () (local-set-key (kbd "<C-c C-t>") 'dante-type-at)))

(add-hook 'haskell-mode-hook
          (lambda ()
            (interactive-haskell-mode 1)
            (smartparens-mode 1)
            (electric-pair-local-mode 0)
            (flycheck-mode 1)
            (define-key haskell-mode-map (kbd "s-r") (lambda ()
                                                       (interactive)
                                                       (shell-command "stack run")))))

(setq haskell-process-type 'stack-ghci)

(use-package ormolu
 :hook (haskell-mode . ormolu-format-on-save-mode)
 :bind
 (:map haskell-mode-map
   ("C-c r" . ormolu-format-buffer)))
#+END_SRC

** Clojure
#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :init (smartparens-mode))

(add-hook 'cider-mode-hook 'eldoc-mode)
(add-hook 'cider-mode-hook 'smartparens-mode)
(add-hook 'clojure-mode-hook 'smartparens-mode)

(add-hook 'clojure-mode-hook
      '(lambda ()
         (put-clojure-indent 'match 1)))

(add-hook 'cider-mode-hook
      '(lambda ()
         (electric-pair-local-mode 0)
         (define-key cider-mode-map (kbd "<s-return>") 'cider-eval-defun-at-point)))

(add-hook 'cider-repl-mode-hook
      '(lambda ()
         (electric-pair-local-mode 0)
         (local-set-key (kbd "<M-up>") 'cider-repl-previous-input)
         (local-set-key (kbd "<M-down>") 'cider-repl-next-input)))

(setq cider-repl-use-clojure-font-lock t)
(setq cider-prompt-save-file-on-load 'always-save)
(setq cider-repl-display-help-banner nil)
#+END_SRC
** Carp
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/Users/erik/Projects/carp-emacs")
(add-to-list 'load-path "/Users/eriksvedang/Code/carp-emacs")
(require 'carp-mode)
(require 'carp-flycheck)

(add-hook 'carp-mode-hook
          (lambda ()
            (electric-pair-local-mode 0)
            (smartparens-mode 1)
            ;;(flycheck-mode 1)
            ))
#+END_SRC
** C
#+BEGIN_SRC emacs-lisp
(defun compile-c ()
  (interactive)
  (save-buffer)
  (let ((project-dir (locate-dominating-file (buffer-file-name) "makefile")))
    (if project-dir
    (progn (setq default-directory project-dir)
           (compile (format "make")))
      (compile (format "clang %s -O0 -g -o %s" (buffer-name) (file-name-sans-extension (buffer-name)))))))

(defun run-c ()
  (interactive)
  (save-buffer)
  (let ((project-dir (locate-dominating-file (buffer-file-name) "makefile")))
    (if project-dir
    (progn (setq default-directory project-dir)
           (compile (format "make run")))
    (compile (format "./%s" (file-name-sans-extension (buffer-name)))))))

;; Focus on the compiler output window so it's easier to close with 'q'
;; Not a good idea unfortunately since you can't run the code with C-c C-r when not focused on source.
;; (defadvice compile-c (after move-point-to-new-window activate)
;;   (other-window 0))

(add-hook 'c-mode-hook
      (lambda ()
        (electric-pair-local-mode 1)
        (rainbow-mode 0) ;; treats #def as a color
        (disable-ligatures)
        (setq-default c-basic-offset 4)
        (c-set-style "cc-mode")
        (define-key c-mode-map (kbd "C-c C-c") 'compile-c)
        (define-key c-mode-map (kbd "C-c C-r") 'run-c)
        (define-key c-mode-map (kbd "s-r") 'run-c)
        (define-key c-mode-map (kbd "C-c C-f") 'ff-find-other-file)))
#+END_SRC

** C#
#+BEGIN_SRC emacs-lisp

(setenv "PATH" (concat (getenv "PATH") ":/Library/Frameworks/Mono.framework/Versions/Current/Commands"))
(setq exec-path (append exec-path '("/Library/Frameworks/Mono.framework/Versions/Current/Commands")))

(use-package omnisharp
  :ensure t)

(use-package csharp-mode
  :ensure t
  :bind (:map csharp-mode-map
         ("M-."     . omnisharp-go-to-definition)
         ("C-c C-r" . omnisharp-run-code-action-refactoring))
  ;;(bind-key "M-ESC" 'omnisharp-auto-complete)
  :config
  (add-hook 'csharp-mode-hook #'electric-pair-mode)
  (add-hook 'csharp-mode-hook #'omnisharp-mode)
  (add-hook 'csharp-mode-hook #'company-mode)
  (add-hook 'csharp-mode-hook #'flycheck-mode)
  ;;(add-hook 'before-save-hook #'omnisharp-code-format-entire-file)
)

(defun csharp-disable-clear-string-fences (orig-fun &rest args)
  "This turns off `c-clear-string-fences' for `csharp-mode'. When
on for `csharp-mode' font lock breaks after an interpolated string
or terminating simple string."
  (unless (equal major-mode 'csharp-mode)
    (apply orig-fun args)))

(advice-add 'c-clear-string-fences :around 'csharp-disable-clear-string-fences)

(eval-after-load
  'company
  '(add-to-list 'company-backends #'company-omnisharp))
#+END_SRC
** SGML
HTML mode.
#+BEGIN_SRC emacs-lisp
(add-hook 'sgml-mode-hook
      (lambda ()
        (local-set-key (kbd "M-s-.") 'sgml-close-tag)
        (local-set-key (kbd "M-s-…") 'sgml-close-tag)))
(add-hook 'sgml-mode-hook 'smartparens-mode)
(add-hook 'html-mode-hook 'smartparens-mode)
(add-hook 'html-mode-hook 'zencoding-mode)
#+END_SRC

** Zencoding
Expand abbreviated tags to full html.
#+BEGIN_SRC emacs-lisp
(add-hook 'zencoding-mode-hook
      (lambda ()
        (local-set-key (kbd "C-c C-e") 'zencoding-expand-line)))
#+END_SRC

** Pico8
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.p8\\'" . lua-mode))
#+END_SRC

** TEMPLATE
#+BEGIN_SRC emacs-lisp
  ;; (use-package some-mode
  ;;   :init (bind-key "?" #'blah)
  ;;   :config (add-hook 'some-mode-hook #'bleh)
  ;; )
#+END_SRC
** Go
#+BEGIN_SRC emacs-lisp
(defun run-go ()
  (interactive)
  (save-buffer)
  (let ((project-dir (locate-dominating-file (buffer-file-name) ".git")))
    (if project-dir
    (progn (setq default-directory project-dir)
           (compile (format "go run")))
    (compile (format "go run %s" (buffer-file-name))))))

(defun compile-go ()
  (interactive)
  (save-buffer)
  (let ((project-dir (locate-dominating-file (buffer-file-name) "go.mod")))
    (if project-dir
    (progn (setq default-directory project-dir)
           (compile (format "go build ./...")))
      (compile (format "go build %s -o %s" (buffer-name) (file-name-sans-extension (buffer-name)))))))

(use-package go-mode
  :init
  :bind (:map go-mode-map
         ("C-c C-t" . godef-describe)
         ("C-c C-d" . godef-describe)
         ("C-c C-r" . run-go)
         ("C-c C-c" . compile-go)
         ("M-."     . godef-jump))
  :config
  (add-hook 'before-save-hook #'gofmt-before-save)
  (add-hook 'go-mode-hook #'go-imenu-setup)
  (add-hook 'go-mode-hook (electric-pair-mode 1))
  )
#+END_SRC
